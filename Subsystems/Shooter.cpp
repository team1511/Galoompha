// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "Shooter.h"
#include "../Robotmap.h"
#include "../Commands/ShooterIdle.h"
Shooter::Shooter() : Subsystem("Shooter") {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	loadSensor = RobotMap::shooterLoadSensor;
	shooterWheel = RobotMap::shooterShooterWheel;
	kicker = RobotMap::shooterKicker;
	blocker = RobotMap::shooterBlocker;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	shooterWheel->ConfigNeutralMode(CANJaguar::kNeutralMode_Coast);
	shooterWheel->SetSafetyEnabled(false);
}
    
void Shooter::InitDefaultCommand() {
	// Set the default command for a subsystem here.
	//SetDefaultCommand(new MySpecialCommand());
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	SetDefaultCommand(new ShooterIdle());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}
// Put methods for controlling this subsystem
// here. Call these from Commands.
bool Shooter::holdsDisk() {
	return loadSensor->Get() == 0;
}
#define BLOCK_HIGH 0.5
#define BLOCK_LOW 0.1
void Shooter::block(bool doit) {
	blocker->Set(doit ? BLOCK_HIGH : BLOCK_LOW);
}
#define KICK_OUT 0.7
#define KICK_BACK 0.48
void Shooter::kick(bool forward) {
	kicker->Set(forward ? KICK_OUT : KICK_BACK);
}
void Shooter::setTargetSpeed(float speed) {
	shooterWheel->Set(speed);
}
bool Shooter::atTargetSpeed() {
	return true;
}
