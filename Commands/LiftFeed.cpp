// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "LiftFeed.h"
float linearRangeScale(float v, float min, float max,
		float newMin, float newMax) {
	float oldr = (max - min);
	float newr = (newMax - newMin);
	return (((v - min) * newr) / oldr) + newMin;
}
//absolute limits for the pot on the angle controller
#define ANGLEPOT_MAX 1.2f
#define ANGLEPOT_MIN 0.45f
#define ANGLE_FEED 0.44f
LiftFeed::LiftFeed() :
	PIDCommand("Lift Feed", 1.0, 0.0, 0.0, 0.0, 0.020)
{
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}
// Called just before this Command runs the first time
void LiftFeed::Initialize() {
	float target = linearRangeScale(ANGLE_FEED, -1.0, 1.0, ANGLEPOT_MIN, ANGLEPOT_MAX);
	GetPIDController()->SetSetpoint(target);
}
// Called repeatedly when this Command is scheduled to run
void LiftFeed::Execute() {
//	float v = Robot::oi->getVirtualStick()->GetY();
//	printf("Joy: %f Target\n", v);
//	float target = linearRangeScale(v, -1.0, 1.0, ANGLEPOT_MIN, ANGLEPOT_MAX);
//	GetPIDController()->SetSetpoint(target);
}
// Make this return true when this Command no longer needs to run execute()
bool LiftFeed::IsFinished() {
	return false;
}
// Called once after isFinished returns true
void LiftFeed::End() {
	
}
// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void LiftFeed::Interrupted() {
}
double LiftFeed::ReturnPIDInput() {
	double v = Robot::anglingTool->anglePot->GetVoltage(); 
	printf("input %f\n", v);
	return v;
}
void LiftFeed::UsePIDOutput(double output) {
	printf("output %f\n", output);
	Robot::anglingTool->liftLeadscrew->Set(output);
}
