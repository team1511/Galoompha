// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "LiftFeed.h"
#define ANGLE_FEED 0.44f
LiftFeed::LiftFeed() :
	PIDCommand("Lift Feed", ANGLE_PID_P, ANGLE_PID_I, ANGLE_PID_D, ANGLE_PID_PERIOD)
{
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::anglingTool);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	GetPIDController()->Disable();
}
// Called just before this Command runs the first time
void LiftFeed::Initialize() {
	GetPIDController()->SetSetpoint(ANGLE_FEED);
	GetPIDController()->Enable();
}
// Called repeatedly when this Command is scheduled to run
void LiftFeed::Execute() {
}
// Make this return true when this Command no longer needs to run execute()
bool LiftFeed::IsFinished() {
	return Robot::getInstance().IsDisabled();
}
// Called once after isFinished returns true
void LiftFeed::End() {
	GetPIDController()->Disable();
}
// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void LiftFeed::Interrupted() {
	GetPIDController()->Disable();
}
double LiftFeed::ReturnPIDInput() {
	double v = Robot::anglingTool->getAngle(); 
	return v;
}
void LiftFeed::UsePIDOutput(double output) {
	// is it bad for the motor if we write 0.005 AND IT does nothing?
	Robot::anglingTool->setSpeed(output);
}
